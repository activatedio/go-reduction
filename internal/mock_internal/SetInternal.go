// Code generated by mockery v2.45.0. DO NOT EDIT.

package mock_internal

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SetInternal is an autogenerated mock type for the SetInternal type
type SetInternal struct {
	mock.Mock
}

type SetInternal_Expecter struct {
	mock *mock.Mock
}

func (_m *SetInternal) EXPECT() *SetInternal_Expecter {
	return &SetInternal_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, state, action
func (_m *SetInternal) Execute(ctx context.Context, state interface{}, action interface{}) (interface{}, error) {
	ret := _m.Called(ctx, state, action)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) (interface{}, error)); ok {
		return rf(ctx, state, action)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) interface{}); ok {
		r0 = rf(ctx, state, action)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, interface{}) error); ok {
		r1 = rf(ctx, state, action)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetInternal_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type SetInternal_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - state interface{}
//   - action interface{}
func (_e *SetInternal_Expecter) Execute(ctx interface{}, state interface{}, action interface{}) *SetInternal_Execute_Call {
	return &SetInternal_Execute_Call{Call: _e.mock.On("Execute", ctx, state, action)}
}

func (_c *SetInternal_Execute_Call) Run(run func(ctx context.Context, state interface{}, action interface{})) *SetInternal_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}), args[2].(interface{}))
	})
	return _c
}

func (_c *SetInternal_Execute_Call) Return(_a0 interface{}, _a1 error) *SetInternal_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SetInternal_Execute_Call) RunAndReturn(run func(context.Context, interface{}, interface{}) (interface{}, error)) *SetInternal_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewSetInternal creates a new instance of SetInternal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSetInternal(t interface {
	mock.TestingT
	Cleanup(func())
}) *SetInternal {
	mock := &SetInternal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
