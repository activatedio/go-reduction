// Code generated by mockery v2.45.0. DO NOT EDIT.

package mock_internal

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	reflect "reflect"
)

// Access is an autogenerated mock type for the Access type
type Access struct {
	mock.Mock
}

type Access_Expecter struct {
	mock *mock.Mock
}

func (_m *Access) EXPECT() *Access_Expecter {
	return &Access_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, sessionKey, stateType
func (_m *Access) Get(ctx context.Context, sessionKey string, stateType reflect.Type) (interface{}, error) {
	ret := _m.Called(ctx, sessionKey, stateType)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, reflect.Type) (interface{}, error)); ok {
		return rf(ctx, sessionKey, stateType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, reflect.Type) interface{}); ok {
		r0 = rf(ctx, sessionKey, stateType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, reflect.Type) error); ok {
		r1 = rf(ctx, sessionKey, stateType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Access_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Access_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionKey string
//   - stateType reflect.Type
func (_e *Access_Expecter) Get(ctx interface{}, sessionKey interface{}, stateType interface{}) *Access_Get_Call {
	return &Access_Get_Call{Call: _e.mock.On("Get", ctx, sessionKey, stateType)}
}

func (_c *Access_Get_Call) Run(run func(ctx context.Context, sessionKey string, stateType reflect.Type)) *Access_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(reflect.Type))
	})
	return _c
}

func (_c *Access_Get_Call) Return(_a0 interface{}, _a1 error) *Access_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Access_Get_Call) RunAndReturn(run func(context.Context, string, reflect.Type) (interface{}, error)) *Access_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: ctx, sessionKey, stateType, state
func (_m *Access) Set(ctx context.Context, sessionKey string, stateType reflect.Type, state interface{}) error {
	ret := _m.Called(ctx, sessionKey, stateType, state)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, reflect.Type, interface{}) error); ok {
		r0 = rf(ctx, sessionKey, stateType, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Access_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type Access_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionKey string
//   - stateType reflect.Type
//   - state interface{}
func (_e *Access_Expecter) Set(ctx interface{}, sessionKey interface{}, stateType interface{}, state interface{}) *Access_Set_Call {
	return &Access_Set_Call{Call: _e.mock.On("Set", ctx, sessionKey, stateType, state)}
}

func (_c *Access_Set_Call) Run(run func(ctx context.Context, sessionKey string, stateType reflect.Type, state interface{})) *Access_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(reflect.Type), args[3].(interface{}))
	})
	return _c
}

func (_c *Access_Set_Call) Return(_a0 error) *Access_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Access_Set_Call) RunAndReturn(run func(context.Context, string, reflect.Type, interface{}) error) *Access_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccess creates a new instance of Access. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccess(t interface {
	mock.TestingT
	Cleanup(func())
}) *Access {
	mock := &Access{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
